<?php
/**
 * @file
 *   Commerce Registration module code.
 */

/**
 * Implements hook_menu().
 */
function commerce_registration_menu() {
  $menu = array();

  $menu['node/%node/registration'] = array(
    'title' => 'Registrations',
    'access callback' => 'commerce_registration_registration_page_access',
    'access arguments' => array(1),
    'page callback' => 'commerce_registration_registration_page',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  
  $menu['admin/commerce/registrations'] = array(
    'title' => 'Registrations',
    'description' => 'Manage product registrations that have been purchased.',
    'access arguments' => array('administer registration'),
    'page callback' => 'commerce_registration_admin_overview',
    'file' => 'includes/commerce_registration.admin.inc',
  );

  return $menu;
}

/**
 * Page access callback to view all registrations for a given product display.
 * @todo Registration function to check if a given entity is register
 *   enabled.
 */
function commerce_registration_registration_page_access($node) {
  if (isset($node->field_commerce_product)) {
    foreach ($node->field_commerce_product[LANGUAGE_NONE] as $product) {
      $prod = commerce_product_load($product['product_id']);
      $info = array(
        'id' => $product['product_id'],
        'type' => 'commerce_product',
        'bundle' => $prod->type,
      );
      $status = registration_entity_registration_status($info);
      $bundle = registration_entity_registration_bundle($info);
      if ($status == 1 && $bundle != '' &&
        (user_access('view any registration') ||
          user_access('view ' . $bundle . ' registration'))) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Registration page callback for all registrations for a given product display.
 */
function commerce_registration_registration_page($node) {
  $prodids = array();
  foreach ($node->field_commerce_product[LANGUAGE_NONE] as $product) {
    $prodids[] = (int) $product['product_id'];
  }
  $out = "";
  foreach ($prodids as $product_id) {
    $prod = commerce_product_load($product_id);
    $out .= registration_registrations_page('commerce_product', $prod);
  }
  return $out; //theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Implements hook_commerce_checkout_page_info().
 */
function commerce_registration_commerce_checkout_page_info() {
  $pages = array();
  $pages['registration'] = array(
    'name' => t('Registration'),
    'title' => t('Registration Information'),
    'weight' => 5,
    'status_cart' => TRUE,
    'buttons' => TRUE,
  );
  return $pages;
}
/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_registration_commerce_checkout_pane_info() {
  $panes = array();
  $panes['registration_information'] = array(
    'title' => t('Registration Information'),
    'base' => 'commerce_registration_information',
    'page' => 'registration',
    'enabled' => TRUE,
    'weight' => -50,
    'review' => TRUE,
    'file' => 'includes/commerce_registration.checkout_pane.inc',
  );
  return $panes;
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_registration_commerce_line_item_type_info() {
  $items = array();
  
  $items['registration'] = array(
    'type' => 'registration',
    'name' => t('Registration'),
    'product' => FALSE,
    'description' => t('Contains the registration information for product enabled line items.'),
    'base' => 'commerce_registration_lineitem',
  );

  return $items;
}

function commerce_registration_commerce_line_item_type_info_alter(&$line_item_types) {
  $line_item_types['product']['callbacks']['title'] = 'commerce_registration_product_title';
}

/**
 * Product title line item callback.
 *
 * We alter the title of the default line item to show available slots if the
 * product is register enabled.
 *
 * @param $line_item
 *
 * @return
 *   Title of the line item product plus available slots, if applicable.
 */
function commerce_registration_product_title($line_item) {
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  return commerce_registration_get_product_title($line_item_wrapper->commerce_product->value());
}

/**
 * Returns a product title.
 *
 * @param $product
 *   Fully formed Commerce Product object.
 *
 * @return
 *   Product title with remaining capacity if available.
 */
function commerce_registration_get_product_title($product) {
  $settings = registration_entity_settings($product->product_id, 'commerce_product');
  if ($settings['status'] == 1) {
    $avail = (int) $settings['capacity'];
    $filled = (int) registration_event_count($product->product_id, 'commerce_product');
    $avail -= $filled;
    $capacity = ($avail != 0 ? format_plural($avail, '1 slot available', '@count slots available') : 'No slots available');
    return t('@title (@capacity)',
      array(
        '@title' => $product->title,
        '@capacity' => $capacity,
      )
    );
  }
  else {
    return $product->title;
  }
}

/**
 * Registration line item configuration callback.
 */
function commerce_registration_lineitem_configuration() {
  
}

/**
 * Registration line item add form callback.
 */
function commerce_registration_lineitem_add_form(&$form_state) {
  
}

/**
 * Registration line item item add form submit callback.
 */
function commerce_registration_lineitem_add_form_submit(&$line_item, $element, &$form_state, $form) {
  
}

/**
 * Implements hook_form_alter().
 *
 * Changes the product title in the add to cart form to have the remaining
 * capacity if available.
 */
function commerce_registration_form_alter(&$form, &$form_state, $form_id) {
  // Add slots available text to Add to Cart form.
  if (substr($form_id, 0, 30) == 'commerce_cart_add_to_cart_form') {
    switch ($form['product_id']['#type']) {
      case "select":
        $products = $form['product_id']['#options'];
        foreach ($products as $product_id => $title) {
          $product = commerce_product_load($product_id);
          $title = commerce_registration_get_product_title($product);
          $form['product_id']['#options'][$product_id] = $title;
        }
        break;
      case "hidden":
        $product = commerce_product_load($form['product_id']['#value']);
        $settings = registration_entity_settings($product->product_id, 'commerce_product');
        if ($setings['status'] == 1) {
          $submit = $form['submit'];
          unset($form['submit']);
          $capacity = $settings['capacity'];
          $capacity = ($capacity != 0 ? format_plural($capacity, '1 slot available', '@count slots available') : t('No slots available'));
          $form['capacity'] = array(
            '#type' => 'markup',
            '#markup' => '<em>' . $capacity . '</em>',
          );
          if (registration_has_room($product->product_id, 'commerce_product')) {
            $form['submit'] = $submit;
          }
          else {
            $form['not_available'] = array(
              '#type' => 'markup',
              '#markup' => t('<p><strong>This item is currently unavailable.</strong></p>'),
            );
          }
        }
        break;
    }
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function commerce_registration_entity_property_info_alter(&$info) {
  $info['registration']['properties']['order_id'] = array(
    'label' => t('Order ID'),
    'type' => 'integer',
    'description' => t('The order ID associated with this registration.'),
  );
}

/**
 * Implements hook_views_api().
 */
function commerce_registration_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_registration') . '/includes/views',
  );
}